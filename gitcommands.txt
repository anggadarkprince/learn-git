git init
Transform the current directory into a Git repository.

git clone <repo>
git clone <repo> <directory>
Clone the repository located at <repo> onto the local machine.

git config user.name <name>
Define the author name to be used for all commits in the current repository.

git config --global user.name <name>
git config --global user.email <email>
Define the author name and email to be used for all commits by the current user.

git config --global alias.st status
git config --global alias.co checkout
etc
Define alias of git commands

git add <file/directory>
Stage all changes in <file/directory> for the next commit.

git commit
git commit -m "<message>"
git commit -a
Commit a snapshot of all changes in the working directory.

git status
List which files are staged, unstaged, and untracked.

git log
Display the entire commit history using the default formatting. 

git log --oneline
git log --oneline --graph
Condense each commit to a single line. 

git reflog
Show the reflog for the local repository.

git show <hash>
show detail of commit



STASH
git stash / git stash save "message"
takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.

git stash pop
Popping your stash removes the changes from your stash and reapplies them to your working copy.

git stash apply
reapply the changes to your working copy and keep them in your stash

git stash list
view stashes list

git stash show
view a summary of a stash

git stash drop stash@{1}
git stash clear
delete and clear stashes



BRANCH
git branch <--show-current>
List all of the branches in your repository.

git branch <branch>
Create a new branch called <branch>. This does not check out the new branch.

git branch -d <branch>
git branch -D <branch> #Force delete the specified branch
Delete the specified branch. This is a “safe” operation in that Git prevents you from deleting the branch if it has unmerged changes.

git branch -m <branch>
Rename the current branch to <branch>.

git checkout -b <new-branch>
Create and check out <new-branch>. The -b option is a convenience flag that tells Git to run git branch <new-branch> before running git checkout <new-branch>. 



MERGE
git merge <branch>
Merge the specified branch into the current branch. Git will determine the merge algorithm automatically.



CHECKOUT
git checkout <branch>
Move into branch or return to the most recent commint in the branch

git checkout <commit>
Update all files in the working directory to match the specified commit. 
  can return with -> git checkout <branch/HEAD>

git checkout <commit> <file>
Check out a previous version of a file and move the changes into staging area. 
  can return with -> git checkout <branch/HEAD> <file>

example return to specific commit of specific file
git checkout HEAD -- my-file.txt
git checkout 08f35f8 -- my-file.txt

git checkout <tag>
Checking out by tags



RESTORE
git restore file.txt
git restore --staged file.txt
restore changed / deleted of file


REVERT 
git revert <commit>
Generate a new commit that undoes all of the changes introduced in <commit>, then apply it to the current branch.
<commit> not the hash will result to be, but pick commit to be undone

git revert HEAD
Revert the commit we just created.


RESET
git reset [--staged] <file>
Remove the specified file from the staging area, but leave the working directory unchanged.

git reset
Reset the staging area to match the most recent commit, but leave the working directory unchanged.

git reset --hard
Reset the staging area and the working directory to match the most recent commit. delete changes files in working directory.

git reset [mode:--soft,--mixed (default),--hard] <commit>
Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone.
after reset allow to move forward, before new commit created (will override the commit ahead)

git reset --soft <commit>
Move the current branch tip backward to <commit> and leave both the staging area and the working directory alone.

git reset --hard <commit>
Move the current branch tip backward to <commit> and reset both the staging area and the working directory to match.



CLEAN
git clean -n
Perform a “dry run” of git clean. This will show you which files are going to be removed without actually doing it.

git clean -f
Remove untracked files from the current directory.
The git reset --hard and git clean -f are similar

git clean -fd
remove untracked files and directories

git clean -fdx
remove ignored and untracked files and directories


REBASE
git commit --amend
Combine the staged changes with the previous commit and replace the previous commit with the resulting snapshot.

git rebase <base>
git pull --rebase --autostash
example :
git checkout new-feature
git rebase master
git checkout master
git merge new-feature
Rebase the current branch onto <base> (repeat commit one by one can prevent merge commit), which can be any kind of commit reference (an ID, a branch name, a tag, or a relative reference to HEAD).

git config --global pull.rebase true
git config --global rebase.autostash true
Set default pull to rebase option


REMOTE
git remote
List the remote connections you have to other repositories.

git remote -v
Same as the above command, but include the URL of each connection.

git remote add <name> <url>
Create a new connection to a remote repository. After adding a remote, you’ll be able to use <name> as a convenient shortcut for <url> in other Git commands.

git remote rm <name>
Remove the connection to the remote repository called <name>.

git remote rename <old-name> <new-name>
Rename a remote connection from <old-name> to <new-name>.

git remote prune <remote>
Prune stalled ref branch from remote that not exist anymore



FETCH
git fetch
Fetch all of the branches from the repository. This also downloads all of the required commits and files from the other repository.

git fetch <remote> <branch>
Same as the above command, but only fetch the specified branch.

git pull = git fetch + git merge
git pull <remote> = git fetch <remote> followed by git merge origin/<current-branch>.

git pull --rebase <remote>
Same as the above command, but instead of using git merge to integrate the remote branch with the local one, use git rebase.


PUSH
git push <remote> <branch>
Push the specified branch to <remote>, along with all of the necessary commits and internal objects.

git push <remote> --all
Push all of your local branches to the specified remote.

git push <remote> --tags
Tags are not automatically pushed when you push a branch or use the --all option. The --tags flag sends all of your local tags to the remote repository.

git push -d <origin> <branch>
Delete branch on remote

git push -d <origin> <tagname>
Delete tag on remote


DIFFERENCE
git diff
See changes on working directory against HEAD

git diff --cached
See changes staged files againts HEAD

git diff <hash1> <hash2>
See changes from a snapshot to another snapshot

BLAME
git blame <file>
See user that make changes of the file

TAGGING
git tag
Listing commit that marked

git tag -a v1.4 -m "my version 1.4"
Create new tag

git show v1.4
Show commit by tag

git tag -a v1.2 9fceb02
Tag passed commit by given reference

git tag -d v1.4
Delete existing tag

